Sub regExCleanSAPcsv()
'Regular Expression to clean SAP generated spreadsheet from SAP IH01 Equipment List (Multi-Level).

'!!! if VBScript RegEx 5.5 is disabled in the VBA's tools/references module, it will not work  !!!

 Dim strT1 As String: strT1 = "^ (.*)([0-9][0-9][0-9][0-9]) (.[0-9][0-9][0-9])"
    Dim strReplace As String: strReplace = ""
    Dim regEx As New RegExp
    Dim strInput As String
    Dim description As String
    Dim myRange As range
    Dim count As Integer
    
    Set myRange = ActiveSheet.range("B1:B5000")
    
    For Each c In myRange
        If strPattern <> "" Then
            strInput = c.Value
            
            With regEx
                .Global = True
                .MultiLine = True
                .IgnoreCase = False
                .pattern = strPattern
            End With
            
            If regEx.Test(strInput) Then
                c.Offset(0, 1) = regEx.Replace(strInput, "$1")
                c.Offset(0, 2) = regEx.Replace(strInput, "$2")
                c.Offset(0, 3) = regEx.Replace(strInput, "$3 ")
            End If
        End If
    Next
    
End Sub

'Basic definitions:
'https://stackoverflow.com/questions/22542834/how-to-use-regular-expressions-regex-in-microsoft-excel-both-in-cell-and-loops
'- Range.
'
'E.g. a-z matches an lower case letters from a to z
'E.g. 0-5 matches any number from 0 to 5
'[] Match exactly one of the objects inside these brackets.
'
'E.g. [a] matches the letter a
'E.g. [abc] matches a single letter which can be a, b or c
'E.g. [a-z] matches any single lower case letter of the alphabet.
'() Groups different matches for return purposes. See examples below.
'
'{} Multiplier for repeated copies of pattern defined before it.
'
'E.g. [a]{2} matches two consecutive lower case letter a: aa
'E.g. [a]{1,3} matches at least one and up to three lower case letter a, aa, aaa
'+ Match at least one, or more, of the pattern defined before it.
'
'E.g. a+ will match consecutive a's a, aa, aaa, and so on
'? Match zero or one of the pattern defined before it.
'
'E.g. Pattern may or may not be present but can only be matched one time.
'E.g. [a-z]? matches empty string or any single lower case letter.
'* Match zero or more of the pattern defined before it.
'
'E.g. Wildcard for pattern that may or may not be present.
'E.g. [a-z]* matches empty string or string of lower case letters.
'. Matches any character except newline \n
'
'E.g. a. Matches a two character string starting with a and ending with anything except \n
'| OR operator
'
'E.g. a|b means either a or b can be matched.
'E.g. red|white|orange matches exactly one of the colors.
'^ NOT operator
'
'E.g. [^0-9] character can not contain a number
'E.g. [^aA] character can not be lower case a or upper case A
'\ Escapes special character that follows (overrides above behavior)
'
'E.g. \., \\, \(, \?, \$, \^
'Anchoring Patterns:
'
'^ Match must occur at start of string
'
'E.g. ^a First character must be lower case letter a
'E.g. ^[0-9] First character must be a number.
'$ Match must occur at end of string
'
'E.g. a$ Last character must be lower case letter a
'
'Precedence table:
'
'Order  Name                Representation
'1      Parentheses         ( )
'2      Multipliers         ? + * {m,n} {m, n}?
'3      Sequence & Anchors  abc ^ $
'4      Alternation         |
'Predefined Character Abbreviations:

'abr    same as       meaning
'\d     [0-9]         Any single digit
'\D     [^0-9]        Any single character that's not a digit
'\w     [a-zA-Z0-9_]  Any word character
'\W     [^a-zA-Z0-9_] Any non-word character
'\s     [ \r\t\n\f]   Any space character
'\S     [^ \r\t\n\f]  Any non-space character
'\n     [\n]          New line
